{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "0.0.0.5",
    "parameters": {
        "location": {
            "defaultValue": "eastus2",
            "type": "string",
            "allowedValues": [
                "australiaeast",
                "canadacentral",
                "centralus",
                "eastus",
                "eastus2",
                "westus2",
                "francecentral",
                "germanywestcentral",
                "northeurope",
                "southafricanorth",
                "southcentralus",
                "uksouth",
                "westeurope",
                "japaneast",
                "southeastasia",
                "brazilsouth",
                "southcentralus"
            ],
            "metadata": {
                "description": "AKS Service, Node Pool, and supporting services (Key Vault, App Gateway, etc) region. This needs to be the same region as the vnet provided in these parameters."
            }
        },
        "geoRedundancyLocation": {
            "defaultValue": "centralus",
            "type": "string",
            "allowedValues": [
                "australiasoutheast",
                "canadaeast",
                "eastus2",
                "westus",
                "centralus",
                "westcentralus",
                "francesouth",
                "germanynorth",
                "westeurope",
                "ukwest",
                "northeurope",
                "japanwest",
                "southafricawest",
                "northcentralus",
                "eastasia",
                "eastus",
                "westus2",
                "francecentral",
                "uksouth",
                "japaneast",
                "southeastasia",
                "brazilsouth",
                "southcentralus"
            ],
            "metadata": {
                "description": "For Azure resources that support native geo-redunancy, provide the location the redundant service will have its secondary. Should be different than the location parameter and ideally should be a paired region - https://learn.microsoft.com/azure/best-practices-availability-paired-regions. This region does not need to support availability zones."
            }
        },
        "gitHubAccountName": {
            "type": "string",
            "minLength": 1,
            "metadata": {
                "description": "Your GitHub account where you've forked the repo."
            }
        },
        "gitHubRepoBranch": {
            "type": "string",
            "defaultValue": "main",
            "minLength": 1,
            "metadata": {
                "description": "The branch used to run your workflow. For Jobs not tied to an environment, include the ref path for branch/tag based on the ref path used for triggering the workflow: repo:< Organization/Repository >:ref:< ref path>"
            }
        }
    },
    "variables": {
        "subRgUniqueString": "[uniqueString('aks',subscription().subscriptionId, resourceGroup().id)]",
        "logAnalyticsWorkspaceName": "[concat('la-', variables('subRgUniqueString'))]"
     },
    "resources": [
        {
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "2020-08-01",
            "name": "[variables('logAnalyticsWorkspaceName')]",
            "location": "[parameters('location')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": 30
            },
            "resources": [
                {
                    "type": "savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "AllPrometheus",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "All collected Prometheus information",
                        "query": "InsightsMetrics | where Namespace == \"prometheus\"",
                        "version": 1
                    }
                },
                {
                    "type": "savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "ForbiddenReponsesOnIngress",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "Increase number of forbidden response on the Ingress Controller",
                        "query": "let value = toscalar(InsightsMetrics | where Namespace == \"prometheus\" and Name == \"traefik_entrypoint_requests_total\" | where parse_json(Tags).code == 403 | summarize Value = avg(Val) by bin(TimeGenerated, 5m) | summarize min = min(Value)); InsightsMetrics | where Namespace == \"prometheus\" and Name == \"traefik_entrypoint_requests_total\" | where parse_json(Tags).code == 403 | summarize AggregatedValue = avg(Val)-value by bin(TimeGenerated, 5m) | order by TimeGenerated | render barchart",
                        "version": 1
                    }
                },
                {
                    "type": "savedSearches",
                    "apiVersion": "2020-08-01",
                    "name": "NodeRebootRequested",
                    "dependsOn": [
                        "[concat('Microsoft.OperationalInsights/workspaces/', variables('logAnalyticsWorkspaceName'))]"
                    ],
                    "properties": {
                        "eTag": "*",
                        "category": "Prometheus",
                        "displayName": "Nodes reboot required by kured",
                        "query": "InsightsMetrics | where Namespace == \"prometheus\" and Name == \"kured_reboot_required\" | where Val > 0",
                        "version": 1
                    }
                }
            ]
        },        
        {
            "type": "Microsoft.OperationsManagement/solutions",
            "apiVersion": "2015-11-01-preview",
            "name": "[concat('ContainerInsights(', variables('logAnalyticsWorkspaceName'),')')]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            ],
            "properties": {
                "workspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('logAnalyticsWorkspaceName'))]"
            },
            "plan": {
                "name": "[concat('ContainerInsights(', variables('logAnalyticsWorkspaceName'),')')]",
                "product": "OMSGallery/ContainerInsights",
                "promotionCode": "",
                "publisher": "Microsoft"
            }
        },        
        {
            "name": "PodFailedScheduledQuery",
            "type": "microsoft.insights/scheduledqueryrules",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.OperationsManagement/solutions',concat('ContainerInsights(', variables('logAnalyticsWorkspaceName'),')'))]" 
            ],
            "apiVersion": "2021-08-01",
            "tags": {},
            "properties": {
                "description": "Example from: https://learn.microsoft.com/azure/azure-monitor/insights/container-insights-alerts",
                "severity": 3,
                "enabled": true,
                "evaluationFrequency": "PT5M",
                "scopes": [
                    "[subscription().id]"
                ],
                "windowSize": "PT5M",
                "overrideQueryTimeRange": "P2D",
                "criteria": {
                    "allOf": [
                        {
                            "query": "let trendBinSize = 1m;\r\nKubePodInventory\r\n| distinct ClusterName, TimeGenerated, _ResourceId\r\n| summarize ClusterSnapshotCount = count() by bin(TimeGenerated, trendBinSize), ClusterName, _ResourceId\r\n| join hint.strategy=broadcast (\r\nKubePodInventory\r\n| distinct ClusterName, Computer, PodUid, TimeGenerated, PodStatus\r\n| summarize TotalCount = count(),\r\nPendingCount = sumif(1, PodStatus =~ \"Pending\"),\r\nRunningCount = sumif(1, PodStatus =~ \"Running\"),\r\nSucceededCount = sumif(1, PodStatus =~ \"Succeeded\"),\r\nFailedCount = sumif(1, PodStatus =~ \"Failed\")\r\nby ClusterName, bin(TimeGenerated, trendBinSize)\r\n)\r\non ClusterName, TimeGenerated\r\n| extend UnknownCount = TotalCount - PendingCount - RunningCount - SucceededCount - FailedCount\r\n| project TimeGenerated,\r\nClusterName,\r\n_ResourceId,\r\nTotalCount = todouble(TotalCount) / ClusterSnapshotCount,\r\nPendingCount = todouble(PendingCount) / ClusterSnapshotCount,\r\nRunningCount = todouble(RunningCount) / ClusterSnapshotCount,\r\nSucceededCount = todouble(SucceededCount) / ClusterSnapshotCount,\r\nFailedCount = todouble(FailedCount) / ClusterSnapshotCount,\r\nUnknownCount = todouble(UnknownCount) / ClusterSnapshotCount",
                            "timeAggregation": "Average",
                            "metricMeasureColumn": "FailedCount",
                            "dimensions": [
                                {
                                    "name": "ClusterName",
                                    "operator": "Include",
                                    "values": [
                                        "*"
                                    ]
                                }
                            ],
                            "resourceIdColumn": "_ResourceId",
                            "operator": "GreaterThan",
                            "threshold": 3,
                            "failingPeriods": {
                                "numberOfEvaluationPeriods": 1,
                                "minFailingPeriodsToAlert": 1
                            }
                        }
                    ]
                }
            }
        }
    ]
}
